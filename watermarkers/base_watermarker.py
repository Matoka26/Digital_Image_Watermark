from abc import ABC
from typing import Tuple
import copy
import numpy as np
import warnings


class BaseWatermarker(ABC):

    cat_map_periods = {
        2: 3,
        3: 4,
        4: 3,
        5: 10,
        6: 12,
        7: 8,
        8: 6,
        9: 12,
        10: 30,
        11: 5,
        12: 12,
        13: 14,
        14: 24,
        15: 20,
        16: 12,
        17: 18,
        18: 12,
        19: 9,
        20: 30,
        21: 8,
        22: 15,
        23: 24,
        24: 12,
        25: 50,
        26: 42,
        27: 36,
        28: 24,
        29: 7,
        30: 60,
        31: 15,
        32: 24,
        33: 20,
        34: 18,
        35: 40,
        36: 12,
        37: 38,
        38: 9,
        39: 28,
        40: 30,
        41: 20,
        42: 24,
        43: 44,
        44: 15,
        45: 60,
        46: 24,
        47: 16,
        48: 12,
        49: 56,
        50: 150,
        51: 36,
        52: 42,
        53: 54,
        54: 36,
        55: 10,
        56: 24,
        57: 36,
        58: 21,
        59: 29,
        60: 60,
        61: 30,
        62: 15,
        63: 24,
        64: 48,
        65: 70,
        66: 60,
        67: 68,
        68: 18,
        69: 24,
        70: 120,
        71: 35,
        72: 12,
        73: 74,
        74: 114,
        75: 100,
        76: 9,
        77: 40,
        78: 84,
        79: 39,
        80: 60,
        81: 108,
        82: 60,
        83: 84,
        84: 24,
        85: 90,
        86: 132,
        87: 28,
        88: 30,
        89: 22,
        90: 60,
        91: 56,
        92: 24,
        93: 60,
        94: 48,
        95: 90,
        96: 24,
        97: 98,
        98: 168,
        99: 60,
        100: 150,
        101: 25,
        102: 36,
        103: 104,
        104: 42,
        105: 40,
        106: 54,
        107: 36,
        108: 36,
        109: 54,
        110: 30,
        111: 76,
        112: 24,
        113: 38,
        114: 36,
        115: 120,
        116: 21,
        117: 84,
        118: 87,
        119: 72,
        120: 60,
        121: 55,
        122: 30,
        123: 20,
        124: 15,
        125: 250,
        126: 24,
        127: 128,
        128: 96,
        129: 44,
        130: 210,
        131: 65,
        132: 60,
        133: 72,
        134: 204,
        135: 180,
        136: 18,
        137: 138,
        138: 24,
        139: 23,
        140: 120,
        141: 16,
        142: 105,
        143: 70,
        144: 12,
        145: 70,
        146: 222,
        147: 56,
        148: 114,
        149: 74,
        150: 300,
        151: 25,
        152: 18,
        153: 36,
        154: 120,
        155: 30,
        156: 84,
        157: 158,
        158: 39,
        159: 108,
        160: 120,
        161: 24,
        162: 108,
        163: 164,
        164: 60,
        165: 20,
        166: 84,
        167: 168,
        168: 24,
        169: 182,
        170: 90,
        171: 36,
        172: 132,
        173: 174,
        174: 84,
        175: 200,
        176: 60,
        177: 116,
        178: 66,
        179: 89,
        180: 60,
        181: 45,
        182: 168,
        183: 60,
        184: 24,
        185: 190,
        186: 60,
        187: 90,
        188: 48,
        189: 72,
        190: 90,
        191: 95,
        192: 48,
        193: 194,
        194: 294,
        195: 140,
        196: 168,
        197: 198,
        198: 60,
        199: 11,
        200: 150,
        201: 68,
        202: 75,
        203: 56,
        204: 36,
        205: 20,
        206: 312,
        207: 24,
        208: 84,
        209: 45,
        210: 120,
        211: 21,
        212: 54,
        213: 140,
        214: 36,
        215: 220,
        216: 36,
        217: 120,
        218: 54,
        219: 148,
        220: 30,
        221: 126,
        222: 228,
        223: 224,
        224: 24,
        225: 300,
        226: 114,
        227: 228,
        228: 36,
        229: 57,
        230: 120,
        231: 40,
        232: 42,
        233: 26,
        234: 84,
        235: 80,
        236: 87,
        237: 156,
        238: 72,
        239: 119,
        240: 60,
        241: 120,
        242: 165,
        243: 324,
        244: 30,
        245: 280,
        246: 60,
        247: 126,
        248: 30,
        249: 84,
        250: 750,
        251: 125,
        252: 24,
        253: 120,
        254: 384,
        255: 180,
        256: 192,
        257: 258,
        258: 132,
        259: 152,
        260: 210,
        261: 84,
        262: 195,
        263: 88,
        264: 60,
        265: 270,
        266: 72,
        267: 44,
        268: 204,
        269: 134,
        270: 180,
        271: 135,
        272: 36,
        273: 56,
        274: 138,
        275: 50,
        276: 24,
        277: 278,
        278: 69,
        279: 60,
        280: 120,
        281: 28,
        282: 48,
        283: 284,
        284: 105,
        285: 180,
        286: 210,
        287: 40,
        288: 24,
        289: 306,
        290: 210,
        291: 196,
        292: 222,
        293: 294,
        294: 168,
        295: 290,
        296: 114,
        297: 180,
        298: 222,
        299: 168,
        300: 300,
        301: 88,
        302: 75,
        303: 100,
        304: 36,
        305: 30,
        306: 36,
        307: 44,
        308: 120,
        309: 104,
        310: 30,
        311: 155,
        312: 84,
        313: 314,
        314: 474,
        315: 120,
        316: 39,
        317: 318,
        318: 108,
        319: 35,
        320: 240,
        321: 36,
        322: 24,
        323: 18,
        324: 108,
        325: 350,
        326: 492,
        327: 108,
        328: 60,
        329: 16,
        330: 60,
        331: 55,
        332: 84,
        333: 228,
        334: 168,
        335: 340,
        336: 24,
        337: 338,
        338: 546,
        339: 76,
        340: 90,
        341: 15,
        342: 36,
        343: 392,
        344: 132,
        345: 120,
        346: 174,
        347: 116,
        348: 84,
        349: 87,
        350: 600,
        351: 252,
        352: 120,
        353: 118,
        354: 348,
        355: 70,
        356: 66,
        357: 72,
        358: 267,
        359: 179,
        360: 60,
        361: 171,
        362: 45,
        363: 220,
        364: 168,
        365: 370,
        366: 60,
        367: 368,
        368: 24,
        369: 60,
        370: 570,
        371: 216,
        372: 60,
        373: 374,
        374: 90,
        375: 500,
        376: 48,
        377: 14,
        378: 72,
        379: 189,
        380: 90,
        381: 128,
        382: 285,
        383: 384,
        384: 96,
        385: 40,
        386: 582,
        387: 132,
        388: 294,
        389: 194,
        390: 420,
        391: 72,
        392: 168,
        393: 260,
        394: 198,
        395: 390,
        396: 60,
        397: 398,
        398: 33,
        399: 72,
    }

    @staticmethod
    def _arnolds_cat_map_inverse(img_array: np.ndarray, secret_key: int = 0):
        assert len(img_array.shape) == 2,\
            "Image should have 1 color channel"

        assert img_array.shape[0] == img_array.shape[1],\
            "Image should be 2D array" \

        img_period = BaseWatermarker.cat_map_periods[img_array.shape[0]]

        return BaseWatermarker._arnolds_cat_map_scramble(img_array, secret_key=(img_period - secret_key))

    @staticmethod
    def _arnolds_cat_map_scramble(img_array: np.ndarray, secret_key: int = 1) -> np.ndarray:
        """
        Scrambles the pixels of an image according to the transformation:
            F(x, y) = [ 1  1 ] * [ x ]  (mod N), where N is the side length of the image
                      [ 1  2 ]   [ y ]
        Parameters:
            img_array (np.ndarray): A NumPy array representing an image
            key(int): The number of scrambles applied to the image
        Returns:
            np.ndarray: The resulting scrambled image
        """
        n = img_array.shape[0]
        if n != img_array.shape[1]:
            warnings.warn('Input image is not square')

        ret = copy.deepcopy(img_array)
        for _ in range(secret_key):
            new_image = np.zeros_like(ret)
            for x in range(n):
                for y in range(n):
                    new_image[(x + y) % n, (x + 2 * y) % n] = ret[x, y]
            ret = new_image

        return ret

    @staticmethod
    def _pad_to_center(small_array: np.ndarray, target_shape: Tuple[int, ...]):
        """
        Pads a 2D array (small_array) with zeros so that it is centered
        within a new array of shape target_shape.

        Args:
            small_array (ndarray): The smaller 2D array to pad.
            target_shape (tuple): The shape (height, width) of the target array.

        Returns:
            ndarray: Padded array with small_array centered.
        """
        h_target, w_target = target_shape
        h_small, w_small = small_array.shape

        if h_small > h_target or w_small > w_target:
            raise ValueError("small_array must be smaller than or equal to target_shape")

        pad_top = (h_target - h_small) // 2
        pad_bottom = h_target - h_small - pad_top
        pad_left = (w_target - w_small) // 2
        pad_right = w_target - w_small - pad_left

        padded = np.pad(small_array, ((pad_top, pad_bottom), (pad_left, pad_right)), mode='constant')
        return padded

    def _crop_center(image: np.ndarray, crop_size: Tuple[int, ...]):
        """
        Crop the center of an image to the given shape.

        Parameters:
            image (np.ndarray): Input image.
            crop_size (tuple): (crop_height, crop_width)

        Returns:
            np.ndarray: Center-cropped image.
        """
        h, w = image.shape[:2]
        ch, cw = crop_size

        if ch > h or cw > w:
            raise ValueError("Crop size must be smaller than the image size.")

        start_y = (h - ch) // 2
        start_x = (w - cw) // 2

        return image[start_y:start_y + ch, start_x:start_x + cw]